// vertex shader

#extension EXT_gpu_shader4 : require

attribute vec2 position;

uniform float width;
uniform float height;
uniform sampler2D depth_normal_tex;
uniform vec2 near_far_plane;
uniform vec2 inv_proj;
uniform mat4 view_to_grid_mat;
uniform vec3 grid_orig;
uniform vec3 grid_size;
uniform float cell_area;

varying vec4 blocker;

vec2 instanceID_to_pos(in float instanceID)
{
	vec2 pos = vec2(mod(instanceID, width), floor(instanceID / width) );
	pos /= vec2(width, height);
	return pos;
}

vec3 rotate_zh_cone_coeff(in vec3 dir) 
{ 
	const float zh_second_band = 1.0233266;

	vec2 theta12_cs = normalize(dir.xz);
	vec2 phi12_cs = vec2(sqrt(1.0 - dir.y * dir.y), dir.y); 	

	vec3 rotated_coeffs;

	rotated_coeffs.x = zh_second_band * phi12_cs.x * theta12_cs.y; 
	rotated_coeffs.y = zh_second_band * phi12_cs.y; 
	rotated_coeffs.z = -zh_second_band * phi12_cs.x * theta12_cs.x;
	
	return rotated_coeffs;
}

vec4 create_blocker(in vec3 normal)
{
	// clamped cosine function (see jose.pdf page 5)
	const float zh_first_band = 0.88622689;
	const float zh_second_band = 1.0233266;

	return (abs(normal.y) < 0.99) ? vec4(zh_first_band, rotate_zh_cone_coeff(normal) ) : vec4(zh_first_band, 0.0, zh_second_band * sign(normal.y), 0.0);
}

void main()
{
	// sample depth and normal from geometry buffer
	vec2 sample_pos = instanceID_to_pos(float(gl_InstanceID) ) + position + vec2(0.5 / width, 0.5 / height);
	vec4 t = texture2D(depth_normal_tex, sample_pos);

	// get view space depth
	float depth = t.r + t.g / 255.f;

	float depth2 = depth;

	depth = depth * near_far_plane.y + near_far_plane.x;

	// position in view space
	vec3 view_pos = vec3(2.0 * sample_pos - 1.0, -1.0);
	view_pos.xy = view_pos.xy * inv_proj.xy; 
	view_pos *= depth;

	// transform to grid space
	vec3 grid_pos = vec3(view_to_grid_mat * vec4(view_pos, 1.0) );

	vec3 pos = (grid_pos - grid_orig) / grid_size;

	if (depth2 == 0.0)
	{
		// discard, no geometry
		gl_Position = vec4(-1000.0, -1000.0, 0, 1);
	}
	else
	{
		gl_Position = vec4(pos, 1.0);
	}
	
	vec3 view_space_normal;
	view_space_normal.xy = 2.0 * (t.ba - 0.5);
	vec2 n2 = view_space_normal.xy * view_space_normal.xy;
	view_space_normal.z = sqrt(1.0 - n2.x - n2.y);
	// normal in grid space
	vec3 normal = mat3(view_to_grid_mat) * view_space_normal;

	// surfel size in world space i.e. "unproject pixel" from clip space back to world
	vec2 surfel = vec2(2.0 * depth) * inv_proj.xy / vec2(width, height);

	float surfel_area = surfel.x * surfel.y;

	// point weight = how much of the cell is covered by this surfel
	float point_weight = surfel_area / cell_area;

	blocker = create_blocker(normal) * point_weight;
}